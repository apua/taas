問題
====================

上述背景有兩個問題:

- 降低生產與維護 `成本`_
- 提升 `測試可靠性`_


成本
--------------------

..  不必要的成本
    -   生產或運送 待測物 (target) 都是浪費
        -   採買設備 -- 額外的生產, 不易重複使用而可能再也不會用到, 取貨時間
            (即使從工廠直接取貨並用較低價格也無法徹底解決)
        -   share resource -- transferring resource risk and time cost
    -   維護需要 domain knowledge 人力和空間時間

測試團隊, 取得待測對象 (target) 有兩種方法:

- 公司組織生產 待測對象 (target) 並透過專屬物流送至測試團隊
- 其他團隊將既有的 待測對象 (target) 寄送至測試團隊

第一種方法會造就額外的 生產成本 (含金錢與時間的開銷).
且由於購買後不見得會重複使用, 因此即使壓低 生產成本 (例如直接從工廠取貨),
仍然造成不必要的浪費.

第二種方法雖然減少了重複生產的浪費, 但運送 待測對象 (target) 所需要承擔的
損毀風險 和 時間消耗, 這仍然對 開發測試 與 產品上市的時程 造成壓力.

以上兩種方法都必須為了團隊分散而需要為了準備 待測系統 (SUT) 有額外開銷.


測試可靠性
====================

..
    harmful on test integrity
    - 測試團隊可能會偷雞或不小心採用不符合規格的環境
    - 環境架設與維護的成本 (including "domain knowledge")
    - 自動化測試的極限 -- local side ?

"user satified". 分散各處的測試團隊由於從資源, 環境架設與維護, 到測試的進行,
皆各自為政, 結果是彼此皆使用各自堪用的 自動化測試工具 或不相容的 測試框架,
統整測試結果與分析變得困難.

例如, 測試團隊雖然遵循 "1 GbE 網路" 的測試條件需求, 但為了降低成本,
根據 測試條件 (specification) 的模糊地帶改以網路卡對接的方式
省下 網路交換器 (switch) 的開銷, 在 *測試案例 (test case) 與
測試結果 (test result) 皆未能忠實呈現 測試環境 (test environment) 的差異*.

正如同敏捷開發 (Agile Development), 測試開發的細節會在測試過程中慢慢被
工程師注意到, 但若這些細節無法被忠實呈現, 測試可靠性 (test integrity) 與品質
就無法提升.

除此之外, 由於測試團隊分散, 架設與維護 待測系統 (SUT) 所需要的
專業知識 (domain knowledge) 與人力資源也是分散的,
團隊與團隊之間溝通不良降低 測試可靠性 的風險也會提升.

